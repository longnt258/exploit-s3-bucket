[
{
	"uri": "http://localhost:1313/exploit-s3-bucket/",
	"title": "Exploitation AWS S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Exploit AWS S3 Bucket Overall This article talk about the misconfiguration in AWS S3 Bucket and how to exploit this.\nContent Introduction Preparation Exploitation Solution Clean up resources "
},
{
	"uri": "http://localhost:1313/exploit-s3-bucket/1-introduce/1.1-attackvector/",
	"title": "Attack vector",
	"tags": [],
	"description": "",
	"content": "1. Definition:\nAn attack vector (threat vector) is a way for attackers to enter a network or system. Common attack vectors: Social engineering attacks. Credential theft. Vulnability exploits. 2. Most common attack vectors:\nPhishing: Phishing involves stealing data, such as user\u0026rsquo;s password. Attackers gain access to this data by tricking the victim into revealing it. (ex: ransomware attack).\nEmail attachments: Email attachment can contain malicious code that executes after a user opens the file. (ex: Ryuk attack).\nAccount takeover: Attackers can steal a user\u0026rsquo;s credential (username and password) via phishing attack, brute force attack, or purchasing them on the undergroud market. Attackers can also try to intercept and use a session cookie to impersonate the user to a web application.\nLack of encryption: Unencrypted data can be viewed by anyone who has access to it. It can be intercepted in transit between networks, as in an on-path attack, or simply viewed inadvertently by an intermediary along the network path.\nInsider threats: An insider threat is when a known and trusted user accesses and distributes confidential data, or enables an attacker to do the same. Such occurrences can be either intentional or accidental on the part of the user. External attackers can try to create insider threats by contacting insiders directly and asking, bribing, tricking, or threatening them into providing access. Sometimes malicious insiders act of their own accord, out of dissatisfaction with their organization or for some other reason.\nVulnerability exploits: A vulnerability is a flaw in software or hardware. When an attacker successfully uses a vulnerability to enter a system, this is called a vulnerability \u0026ldquo;exploit.\u0026rdquo; Applying the software or hardware vendor\u0026rsquo;s updates can fix most vulnerabilities. But some vulnerabilities are \u0026ldquo;zero-day\u0026rdquo; vulnerabilities — unknown vulnerabilities for which there is no known fix.\nBrowser-based attacks: To display webpages, Internet browsers load and execute code they receive from remote servers. Attackers can inject malicious code into a website or direct users to a fake website, tricking the browser into executing code that downloads malware or otherwise compromises user devices. With cloud computing, employees often access data and applications solely through their Internet browser, making this threat vector of particular concern.\nApplication compromise: Instead of going after user accounts directly, an attacker may aim to infect a trusted third-party application with malware. Or they could create a fake, malicious application that users unknowingly download and install (a common attack vector for mobile devices).\nOpen ports: A port is a virtual entryway into a device. Ports help computers and servers associate network traffic with a given application or process. Ports that are not in use should be closed. Attackers can send specially crafted messages to open ports to try to compromise the system, just as a car thief might try opening doors to see if any are unlocked.\n3. How can an organization secure its attack vectors?\nGood security practices. Encryption. Browser isolation. Patching vulnerabilities. Secure access service edge (SASE). "
},
{
	"uri": "http://localhost:1313/exploit-s3-bucket/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduce the basic concepts related to Attack vector and Attack surface on premise and on cloud. The document was referenced from Cloudflare Learning.\n"
},
{
	"uri": "http://localhost:1313/exploit-s3-bucket/1-introduce/1.2-attacksurface/",
	"title": "Attack surface",
	"tags": [],
	"description": "",
	"content": "1. Definition:\nAn attack surface is all the points of entry and vulnerabilities an attacker can exploit to infiltrate a network or a system. It is essentially like all the doors and windows in a house — the more doors and windows a house has, the more potential entry points for a break-in. Understanding a network’s attack surface is critical — by knowing where the vulnerabilities are and monitoring it accordingly, an organization can reduce their attack surface and make it much harder for attackers to penetrate and compromise systems. 2. The components of an attack surface:\nDigital attack surface includes networks and services, such as ports, codes and wireless connections. Physical attack surface includes endpoint devices like USB ports and laptops. Social engineering attack surface refers to targeting personnel or employees such as phishing or ransomware attempts. 3. The strategies which organizations implement to reduce their attack surface?\nRegular vulnerability assessment and penetration testing to identify system weakness and keeping software and operating systems up to date with the latest security patches. "
},
{
	"uri": "http://localhost:1313/exploit-s3-bucket/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rWe will proceed to exploit AWS S3 Bucket through misconfiguration. Please note that the instructions below are for reference only and should not be used for any other purpose.\n1. OS:\nKali linux: https://www.kali.org/ 2. Tools:\nLazys3: https://github.com/nahamsec/lazys3 S3scanner: https://pypi.org/project/S3Scanner/ 3. Target: AWS S3 Bucket which has a public static website.\n"
},
{
	"uri": "http://localhost:1313/exploit-s3-bucket/3-exploitation/",
	"title": "Exploitation",
	"tags": [],
	"description": "",
	"content": "We will exploit the AWS S3 Bucket on this website with domain: http://exploit-s3-bucket.click "
},
{
	"uri": "http://localhost:1313/exploit-s3-bucket/1-introduce/1.3-premisecloud/",
	"title": "On-Premise and On-Cloud",
	"tags": [],
	"description": "",
	"content": "1. On-Premise: refers to IT systems, software, or infrastructure that are hosted and managed locally within an organization\u0026rsquo;s own facilities, rather than being provided or hosted by an external service provider.\n2. On-Cloud: (often referred to as \u0026ldquo;cloud-based\u0026rdquo;) refers to IT systems, software, and infrastructure that are hosted, managed, and delivered over the internet by external service providers, rather than being maintained on-premise by the organization itself.\n3. Attack vector on-premise and on-cloud:\nNetwork: On-Premise: Exploit vulnerabilities from poorly configured firewalls or unpatched network devices\u0026hellip; On-Cloud: Exploit misconfigurations in VPCs, security groups, ACLs,\u0026hellip; Authentication and Access Control: On-Premise: Steal user\u0026rsquo;s credential, exploit vulnerabilities to gain higher levels of access (privilege escalation)\u0026hellip; On-Cloud: Misconfigured IAM roles or policies, steal authentication tokens or API keys. Application and Service Vulnerabilities: On-Premise: Exploit vulnerabilities in internally hosted applications or services\u0026hellip; On-Cloud: Exposed storage buckets or improperly secured APIs. Data Security: On-Premise: Thief or loss of physical storage device that contain sensitive data. On-Cloud: Misconfigured cloud storage or database services can lead to unauthorized data exposure. Insider Threats: On-Premise: Employees or contractors with access to internal system might misuse their access or steal data. On-Cloud: Potential threats from cloud service provider staff, though access to customer data is typically restricted. 4. Attack surface on-premise and on-cloud:\nInfrastructure: On-Premise: Physical access to servers, network devices and data centers can be exploited. On-Cloud: Exposed endpoints and APIs in cloud services can be targeted if not properly secured. Network: On-Premise: Risks from internal communications and data transfer, especially if not properly encrypted. On-Cloud: Potential for interception of data transmitted over public or unsecured networks. Systems and Services: On-Premise: Exploits targeting locally hosted applications or services, including unpatched software or known vulnerabilities. On-Cloud: Exploits due to misconfigured cloud services or risks related to unsecured or improperly managed APIs that interact with cloud services. Access Control: On-Premise: Risks associated with weak or compromised authentication mechanisms for accessing on-premise systems. On-Cloud: IAM Misconfigurations "
},
{
	"uri": "http://localhost:1313/exploit-s3-bucket/3-exploitation/3.1-reconscan/",
	"title": "Reconnaissance and Scanning",
	"tags": [],
	"description": "",
	"content": " Use host command to get DNS records: host exploit-s3-bucket.click \u0026ndash;\u0026gt; Get the IP 16.182.107.157. Then using host IP command: host 16.182.107.157 \u0026ndash;\u0026gt; Get the domain name s3-website-us-east-1.amazonaws.com. We can enter this IP address into the browser \u0026ndash;\u0026gt; Redirect to AWS page. We can also use dnsrecon to find the IP: dnsrecon -d exploit-s3-bucket.click. Check this domain is a S3 Bucket by using lazys3: ruby lazys3.rb exploit-s3-bucket.click. And now we combine this bucket name (exploit-s3-bucket.click) with domain name we found (s3-website-us-east-1.amazonaws.com) \u0026ndash;\u0026gt; exploit-s3-bucket.click.s3-website-us-east-1.amazonaws.com. "
},
{
	"uri": "http://localhost:1313/exploit-s3-bucket/3-exploitation/3.2-exploit/",
	"title": "Exploitation",
	"tags": [],
	"description": "",
	"content": " Check whether data in bucket is public: aws s3 ls s3://exploit-s3-bucket.click \u0026ndash;no-sign-request. Check the permission of this S3 Bucket by using S3Scanner: python3 -m S3Scanner scan \u0026ndash;bucket exploit-s3-bucket.click \u0026ndash;\u0026gt; We can see the status and permission of bucket. We have a read permission for all users, so we can dump files scanned by using S3Scanner: python3 -m S3Scanner dump \u0026ndash;bucket exploit-s3-bucket.click \u0026ndash;dump-dir /home/longnt/Desktop/Exploit-AWS-S3-Bucket. "
},
{
	"uri": "http://localhost:1313/exploit-s3-bucket/4-solution/",
	"title": "Solution",
	"tags": [],
	"description": "",
	"content": " Block public access (bucket setting): Select at least one of the four options or choose \u0026lsquo;Block all public access\u0026rsquo; if public access to the data is not necessary. Bucket policy: Be careful when adjusting policy configurations, as incorrect settings can lead to data being exposed. Below is an example of a configuration that allows anyone to access the data. Public objects: Just public the objects we need to use. "
},
{
	"uri": "http://localhost:1313/exploit-s3-bucket/5-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Empty S3 Bucket Go to AWS S3. In the Bucket name list, select the bucket related to the lab. Select Empty. In the Empty bucket page, confirm and select Empty. Delete S3 bucket Go to AWS S3. Select S3 bucket related to the lab. Select Delete bucket. "
},
{
	"uri": "http://localhost:1313/exploit-s3-bucket/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/exploit-s3-bucket/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]